apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: mgmt
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kafka-ui
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kafka-ui
      namespace: mgmt
    spec:
      containers:
        - env:
            - name: SERVICE_NAME
              value: kafka-ui
            #- name: DYNAMIC_CONFIG_ENABLED
            #  value: "true"
            - name: AUTH_TYPE
              value: "LOGIN_FORM"
            - name: SPRING_SECURITY_USER_NAME
              value: admin
            - name: SPRING_SECURITY_USER_PASSWORD
              value: your-password
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: kafka.mgmt.svc:9092
            - name: KAFKA_CLUSTERS_0_READONLY
              value: "true"
          image: provectuslabs/kafka-ui:latest
          imagePullPolicy: IfNotPresent
          name: kafka-ui
          ports:
            - containerPort: 8080
              name: port-8080
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-ui
  name: kafka-ui
  namespace: mgmt
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: port-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: kafka-ui
  sessionAffinity: None
  type: ClusterIP
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: kafka-ui-ing
#  namespace: mgmt
#spec:
#  ingressClassName: nginx
#  rules:
#    - host: kafka-ui.example.com
#      http:
#        paths:
#          - backend:
#              service:
#                name: kafka-ui
#                port:
#                  number: 8080
#            path: /
#            pathType: ImplementationSpecific
#status:
#  loadBalancer:
#    ingress:
#      - ip: 1.1.1.1
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: kafka-ui
  namespace: mgmt
spec:
  gateways:
    - istio-ingress/gateway-internal
  hosts:
    - kafka-ui.example.com
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: kafka-ui.mgmt.svc.cluster.local
            port:
              number: 8080
